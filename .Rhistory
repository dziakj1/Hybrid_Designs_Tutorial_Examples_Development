source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Hybrid_Designs_Tutorial_Examples-main/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_SMART.R")
help(write.csv)
source("~/SimExamples/Simulate_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Simulate_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_MRT.R")
dim(occasion_level)
gee_proximal
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
geeglm
library(geepack)
# Read the simulated person-level data for distal outcome analysis
person_level <- read.csv("Simulated_Data_Hybrid_SMART_MRT_person_level.csv")
print(head(person_level))
print(summary(person_level))
person_level$replicate_weight <- 4*(person_level$R==0) + 2*(person_level$R==1)
person_level$replicate <- 1
rows_to_replicate <- person_level[which(person_level$R==1),]
rows_not_to_replicate <- person_level[which(person_level$R==0),]
positive_pseudodata <- rows_to_replicate
positive_pseudodata$meal <- 1
positive_pseudodata$replicate <- 1
negative_pseudodata <- rows_to_replicate
negative_pseudodata$meal <- -1
negative_pseudodata$replicate <- 2
# We keep the same subject ID to show that we don't really have all those
# new participants.  So we have to distinguish the new observations somehow,
# and so we treat them as new waves of data on the same person.
data_for_analysis <- rbind(positive_pseudodata,
negative_pseudodata,
rows_not_to_replicate)
data_for_analysis <- data_for_analysis[order(data_for_analysis$ID,
data_for_analysis$replicate),]
rownames(data_for_analysis) <- NULL
print(head(data_for_analysis))
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
head()
head(person_level_data_for_analysis)
distal_outcome_model <- geeglm(formula = final_kg_lost ~ is_female +
baseline_bmi_centered +
coaching * meal,
weights=replicate_weight,
family=gaussian,
id=ID,
data=person_level_data_for_analysis)
print(summary(distal_outcome_model))
occasion_level$replicate_weight <- 4*(occasion_level$R==0) + 2*(occasion_level$R==1)
occasion_level$replicate_weight <- 4*(occasion_level$R==0) + 2*(occasion_level$R==1)
library(geepack)
# Read the simulated person-level data for distal outcome analysis
person_level <- read.csv("Simulated_Data_Hybrid_SMART_MRT_person_level.csv")
print(head(person_level))
print(summary(person_level))
person_level$replicate_weight <- 4*(person_level$R==0) + 2*(person_level$R==1)
person_level$replicate <- 1
person_level_rows_to_replicate <- person_level[which(person_level$R==1),]
person_level_rows_not_to_replicate <- person_level[which(person_level$R==0),]
person_level_positive_pseudodata <- person_level_rows_to_replicate
person_level_positive_pseudodata$meal <- 1
person_level_positive_pseudodata$replicate <- 1
person_level_negative_pseudodata <- person_level_rows_to_replicate
person_level_negative_pseudodata$meal <- -1
person_level_negative_pseudodata$replicate <- 2
# We keep the same subject ID to show that we don't really have all those
# new participants.  So we have to distinguish the new observations somehow,
# and so we treat them as new waves of data on the same person.
person_level_data_for_analysis <- rbind(person_level_positive_pseudodata,
person_level_negative_pseudodata,
person_level_rows_not_to_replicate)
person_level_data_for_analysis <- person_level_data_for_analysis[order(person_level_data_for_analysis$ID,
person_level_data_for_analysis$replicate),]
rownames(person_level_data_for_analysis) <- NULL
print(head(person_level_data_for_analysis))
distal_outcome_model <- geeglm(formula = final_kg_lost ~ is_female +
baseline_bmi_centered +
coaching * meal,
weights=replicate_weight,
family=gaussian,
id=ID,
data=person_level_data_for_analysis)
print(summary(distal_outcome_model))
# Read the simulated occasion-level data for proximal outcome analysis
occasion_level <- read.csv("Simulated_Data_Hybrid_SMART_MRT_occasion_level.csv")
print(head(occasion_level))
print(summary(occasion_level))
occasion_level$replicate_weight <- 4*(occasion_level$R==0) + 2*(occasion_level$R==1)
occasion_level
head(occasion_level)
source("~/SimExamples/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
proximal_outcome_model <- glm(formula = proximal_outcome ~ is_female +
baseline_bmi_centered +
A * coaching * meal,
family=binomial(link=log),
id=ID,
weight=replicate_weight,
data=occasion_level_data_for_analysis)
print(head(occasion_level))
print(summary(occasion_level))
print(head(occasion_level_data_for_analysis))
print(summary(occasion_level_data_for_analysis))
proximal_outcome_model <- glm(formula = proximal_outcome ~ is_female +
baseline_bmi_centered +
A * coaching * meal,
family=binomial(link=log),
id=ID,
weight=replicate_weight,
data=occasion_level_data_for_analysis)
proximal_outcome_model <- geeglm(formula = proximal_outcome ~ is_female +
baseline_bmi_centered +
A * coaching * meal,
family=binomial(link=log),
id=ID,
weight=replicate_weight,
data=occasion_level_data_for_analysis)
print(summary(proximal_outcome_model))
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Simulate_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Simulate_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Simulate_Hybrid_SMART_MRT.R")
source("~/SimExamples/Simulate_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_SMART.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_Factorial_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
source("~/SimExamples/Analyze_Simulated_Data_Hybrid_SMART_MRT.R")
